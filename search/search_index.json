{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Documentation for pynxtools-igor","text":"<p>pynxtools-igor is a free, and open-source data software for converting data stored with Wavemetrics Igor Pro into the NeXus format. It is implemented as a plugin for pynxtools and allows to read, translate, and standardize data from Igor Pro binary waves and packed experiment files. Depending on the domain of data, pynxtools allows to ensure compliance with various NeXus application definitions, e.g. NXmpes for for angle-resolved photoemission spectroscopy (ARPES) experiments, or NXxrd for x-ray diffraction experiments.</p> <p>pynxtools-igor is developed both as a standalone reader and as a tool within NOMAD, which is the open-source data management platform for materials science we are developing within FAIRmat.</p> Project and community <ul> <li>NOMAD code guidelines </li> </ul> <p>Any questions or suggestions? Get in touch!</p> <p>The work is funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) - 460197019 (FAIRmat).</p>"},{"location":"index.html#tutorial","title":"Tutorial","text":"<p>A series of tutorials giving you an overview on how to store or convert your XPS data to NeXus compliant files.</p> <ul> <li>Installation guide</li> <li>Standalone usage and examples</li> </ul>"},{"location":"index.html#how-to-guides","title":"How-to guides","text":"<ul> <li>coming soon!</li> </ul>"},{"location":"index.html#learn","title":"Learn","text":"<ul> <li>coming soon!</li> </ul>"},{"location":"index.html#reference","title":"Reference","text":"<p>Here you can learn which options are available for configuring the igor reader</p>"},{"location":"reference/igor.html","title":"Data from Igor Pro","text":"<p>The igor reader allows reading data from Wavemetrics Igor Pro <code>.ibw</code> \"binary wave\" files and <code>.pxp</code> \"packed experiment\" files. These two modes of operation are mutually exclusive, i.e. you can either pass one or multiple ibw files, or one pxp file. The behavior of the reader is controlled via two config files: <code>config.json</code> defines the assignment to nexus class paths, whereas <code>entries.yaml.entry</code> defines which data to read from the source file(s). Here we explain several examples how to use the reader. These examples convert to the nexus class <code>NXroot</code>, the most generic Nexus class, but any other NeXus application definition can also be used.</p>"},{"location":"reference/igor.html#convert-from-ibw-igor-binary-wave-files","title":"Convert from <code>.ibw</code> Igor binary wave files","text":"<p>The conversion from <code>.ibw</code> files does not require the definition of an entry file. In that case, each ibw file generates an entry with the filename (excluding \".ibw\") as entry name. Axis data as well as units are read from the ibw wave information (internal wave scaling), and named <code>axis0</code> to <code>axis3</code>. These are available via the <code>@data</code> mechanism. Wave notes are parsed and split according to a <code>key=value\\\\n</code> schema, and are available vie the <code>@attrs</code> mechanism.</p> <p>Alternatively, an entry definition can be passed in addition, which contains a dictionary of entries, where each entry key generates an entry of that name. The dict entries are expected to be dicts as well, containing at least the key <code>data</code> with the filename of the respective ibw file to use as data for this entry. Additionally, <code>axisN_name</code> keys can be passed to rename the axis entries from the default <code>axis0</code> to <code>axis3</code>. Similarly, <code>axisN_units</code> and <code>data_units</code> can be passed to overwrite respective information read from the ibw files. ibw files for which no entry has been defined will generate an entry according to their filename as before. Additionally, each entry can contain a <code>metadata</code> dict with additional metadata specific to this entry.</p> <p>This entry dict can be passed as an object, in which case it is expected as sole and single object in the objects tuple. Alternatively, the <code>entry</code> dict can also be passed as yaml file with extension <code>.entry</code>.</p>"},{"location":"reference/igor.html#conversion-from-igor-packed-experiment-files","title":"Conversion from Igor packed experiment files","text":"<p>Conversion from <code>.pxp</code> files requires definition of an entry dict. Here also, each key/value defines one entry to generate in the Nexus file. the <code>data</code> entry contains here the ibw-path to the wave to use as main data entry. Axis information can be either read from the wave scaling, or be provided via an <code>axisN</code> entry, pointing to a wave containing axis information. Similarly, a <code>data_errors</code> key can be defined, pointing to a wave containing data uncertainties.</p> <p>The reader for Igor Pro data can be found here.</p> <p>Example data for the igor reader is available here.</p> <p>The example conversion can be run with the following command. <pre><code>user@box:~$ \ndataconverter --reader igor --nxdl NXroot --output example_pxp.nxs config_file.json Fig2a.pxp Scan57_59.yaml.entry\n</code></pre></p> <p>The reader is a tailored parser for research data in a common format. This particular example is able to read and map HDF5 files, as well as JSON and YAML files. Feel free to contact FAIRmat if you want to create a parser for your research data.</p>"},{"location":"tutorial/installation.html","title":"Installation","text":"<p>It is recommended to use python 3.11 with a dedicated virtual environment for this package. Learn how to manage python versions and virtual environments.</p> <p>This package is a reader plugin for <code>pynxtools</code> and thus should be installed together with <code>pynxtools</code>:</p> <pre><code>pip install pynxtools[igor]\n</code></pre> <p>for the latest development version.</p>"},{"location":"tutorial/standalone.html","title":"Convert Igor pro data and metadata to NeXus","text":""},{"location":"tutorial/standalone.html#who-is-this-tutorial-for","title":"Who is this tutorial for?","text":"<p>This document is for people who want to use this reader as a standalone application for converting their research data into a standardized NeXus format.</p>"},{"location":"tutorial/standalone.html#what-should-you-should-know-before-this-tutorial","title":"What should you should know before this tutorial?","text":"<ul> <li>You should have a basic understanding of FAIRmat NeXus and pynxtools</li> <li>You should have a basic understanding of using Python and Jupyter notebooks via JupyterLab</li> </ul>"},{"location":"tutorial/standalone.html#what-you-will-know-at-the-end-of-this-tutorial","title":"What you will know at the end of this tutorial?","text":"<p>You will have a basic understanding how to use pynxtools-igor for converting your Igor Pro data to a NeXus/HDF5 file.</p>"},{"location":"tutorial/standalone.html#steps","title":"Steps","text":""},{"location":"tutorial/standalone.html#installation","title":"Installation","text":"<p>See here for how to install pynxtools together with the Igor reader plugin.</p>"},{"location":"tutorial/standalone.html#running-the-reader-from-the-command-line","title":"Running the reader from the command line","text":"<p>An example script to run the igor reader in <code>pynxtools</code>: <pre><code> ! dataconverter \\\n--reader igor \\\n--nxdl NXroot \\\n$&lt;igor-file path&gt; \\\n$&lt;eln-file path&gt; \\\n$&lt;entry-file path&gt; \\\n-c $&lt;config-file path&gt; \\\n--output &lt;output-file path&gt;.nxs\n</code></pre></p>"},{"location":"tutorial/standalone.html#examples","title":"Examples","text":"<p>You can find various examples how to use <code>pynxtools-igor</code> for your Igor Pro research data pipeline in <code>src/pynxtools-igor/nomad/examples</code>. These are designed for working with <code>NOMAD</code> and its <code>NOMAD Remote Tools Hub (NORTH)</code>.</p> <p>There are also small example files for using the <code>pynxtools</code> dataconverter with the <code>igor</code> reader in <code>tests/data</code>.</p> <p>For this tutorial, we will work with this data. You can run the conversion as <pre><code>dataconverter \\\\\n    --reader igor \\\\\n    --nxdl NXroot \\\\\n    Norm_0057.ibw \\\\\n    Norm_0059.ibw \\\\\n    -c  config_file.json \\\\\n    --output example_ibw.nxs\n</code></pre></p> <p>Congrats! You now have a NeXus file generated from the igor binary wave files!</p>"}]}